name: Pull request audit bot

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  check-commiter:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    outputs:
      should_continue: ${{ steps.check_is_fms.outputs.result }}
    steps:
    - name: Check all commiter are FMs member
      id: check_is_fms
      uses: actions/github-script@v7
      with:
        script: |
          const commitLists = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
          });
          
          const isAllCommitFromFms = commitLists["data"].every((commit) => {
              // マージコミットの場合はスキップ
              if (commit["parents"] && commit["parents"].length > 1) {
                return true;
              }
              
              const commitAuthor = commit["commit"]["author"]["name"]
              const commitAuthorEmail = commit["commit"]["author"]["email"]
          
              return commitAuthorEmail.includes("@fullmarks.co.jp") 
          })
          
          return isAllCommitFromFms
    
  pr-status-check:
    needs: check-commiter
    if: ${{ fromJSON(needs.check-commiter.outputs.should_continue) }} && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
      - name: Get PR body
        id: pr_body
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const pr = context.payload.pull_request;
            const body = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });
            return body.data.body;
      - name: get_checklist_config
        id: get_checklist_config
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -o=json '.setting' setting/github_action_setting.yaml
      - name: Update PR body
        uses: actions/github-script@v7
        with:
          script: |
            let originalBody = '${{ steps.pr_body.outputs.result }}';
            if (originalBody === "null"){  // 概要欄がnullの場合は"null"が渡される
              originalBody = ""
            }

            const checklists = ${{ steps.get_checklist_config.outputs.result }};
            let result = "";
            let changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ').filter(Boolean);
            
            checklists.forEach(item => {
              let isTargetIncluded = false
              if(item.path.endsWith('/')){
                isTargetIncluded = changedFiles.some((path) =>{
                  return path.includes(item.path)  // パスが含まれているか
                }) && item.checklists.every((checkItem) => {
                  return !originalBody.includes(checkItem)  // PR概要欄にすでに記載がある場合はfalse
                })

              } else {
                isTargetIncluded = changedFiles.some((path) =>{
                  return path === item.path  // パスが一致しているか
                }) && item.checklists.every((checkItem) => {
                  return !originalBody.includes(checkItem) // PR概要欄にすでに記載がある場合はfalse
                })
              }
              
              if(isTargetIncluded){
                item.checklists.forEach(checklist => {
                  result += `${checklist}\n`;
                });
              }
            });

            if(!result){
              return
            }

            const title = "## レビュワーは以下の項目を確認してください";

            const pr = context.payload.pull_request;
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              body: `${originalBody}\n${title}\n${result}`,
            });
            throw new Error('確認されていない項目があります。');

  update-pr-status:
    runs-on: ubuntu-latest
    if: github.event.action == 'edited'
    steps:
    - name: Update status check based on checkboxes
      id: update_check
      uses: actions/github-script@v7
      with:
        script: |
          const prBody = context.payload.pull_request.body || ''
          
          const allCheckboxesChecked = !prBody.includes('- [ ]')

          if (allCheckboxesChecked) {
            return
          } else {
            throw new Error('確認されていない項目があります。')
          }