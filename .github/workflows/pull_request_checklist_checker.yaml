name: Pull request checklist checker

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  check-commiter:
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.check_is_fms.outputs.result }}
    steps:
    - uses: actions/checkout@v4
    - name: Fetch all branches
      run: git fetch --all
    - name: Check all commiter are FMs member
      id: check_is_fms
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process')
          const path = require('path')

          const baseSha = context.payload.pull_request.base.sha
          const headSha = context.payload.pull_request.head.sha

          const repoRoot = process.env.GITHUB_WORKSPACE
          const fmsDomain = '@fullmarks.co.jp'

          conosle.log("base sha", baseSha)
          consoel.log("head sha", headSha)

          const commiterEmails = execSync(
            `git log --ancestry-path --no-merges ${baseSha}..${headSha} --pretty=format:"%ae"`,
            { cwd: repoRoot },
          )
            .toString()
            .split('\n')
            .map((b) => b.trim())  // 前後の空白削除 
            .filter((b) => b)  // 空白行削除

          console.log(commiterEmails)

          const shouldCheckPR = commiterEmails.some((commiterEmail) => {
            return commiterEmail.endsWith(fmsDomain)
          })

          return shouldCheckPR

    
  pr-status-check:
    needs: check-commiter
    if: fromJSON(needs.check-commiter.outputs.should_continue) && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get checklist config
        id: get_checklist_config
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -o=json '.setting' .github/pull_request_check_config.yaml
      - name: Get PR information
        id: pr_information
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const pullRequest = context.payload.pull_request;

            // PRの差分を取得
            const response = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            })
            const files = response.data.map((item) => item.filename).join(",")

            fs.appendFileSync(process.env.GITHUB_OUTPUT, `CHANGED_FILES=${files}\n`);

            // 差分ファイル名: 差分詳細
            const diffData = response.data.reduce((acc, item) => {
              acc[item.filename] = item.patch;
              return acc;
            }, {});
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `CHANGED_FILES_DIFF_DATA=${JSON.stringify(diffData)}\n`);
            
            // PRの概要欄を取得
            const body = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            });

            return body.data.body
      - name: Update PR body
        uses: actions/github-script@v7
        env:
          CHANGED_FILES_DIFF_DATA: ${{ steps.pr_information.outputs.CHANGED_FILES_DIFF_DATA }}
        with:
          script: |
            let originalBody = ${{ steps.pr_information.outputs.result }} ?? ""

            const configs = ${{ steps.get_checklist_config.outputs.result }};
            
            let changedFiles = '${{ steps.pr_information.outputs.CHANGED_FILES }}'.split(',')      

            let changedFilesDiffDataString = process.env.CHANGED_FILES_DIFF_DATA ?? "{}";
            let changedFilesDiffData = JSON.parse(changedFilesDiffDataString);

            let result = "";

            configs.forEach((config) => {
              let hasTargetFileDiffs = false

              if(config.path.endsWith('/')){
                hasTargetFileDiffs = changedFiles.some((path) =>{
                  return path.includes(config.path)  // パスが含まれているか
                }) 
              } else {
                hasTargetFileDiffs = changedFiles.some((path) =>{
                  return path === config.path  // パスが一致しているか
                })
              }

              // riskeyPatternsを含む差分があるか確認
              if(hasTargetFileDiffs && config?.riskeyPatterns) {
                hasTargetFileDiffs = Object.entries(changedFilesDiffData).some(([path, diffData]) => {
                  if (!path.includes(config.path) || !path.endsWith(".py")) return false;

                  // 追加行 (+ で始まる) のみ取得
                  const addedLines = diffData
                    .split("\n")
                    .filter(line => line.startsWith("+"))
                    .map(line => line.substring(1).trim());

                  return config.riskeyPatterns.some(pattern => {
                    const regex = new RegExp(pattern, "g");
                    return addedLines.some(line => regex.test(line)); // 追加された行の中にマッチがあるか                  
                  });
                });
              }

              hasTargetFileDiffs = hasTargetFileDiffs && config.checklists.every((checkItem) => {
                // PR概要欄にすでに記載がある場合はfalse
                // 文字列先頭の空白と記号を削除し、チェック文言のみにする
                const checkItemText = checkItem.match(/\s*\[.*?\]\s*(.*)/)?.[1]

                const checklistPattern = new RegExp(String.raw`- \[.?\] ${checkItemText}`)
                return !checklistPattern.test(originalBody)
              })
              
              if(hasTargetFileDiffs){
                result += config.checklists.join("\n") + "\n"
              }
            }) 

            if(!result){
              return
            }

            const title = "## レビュワーは以下の項目を確認してください";

            const pullRequest = context.payload.pull_request;
            // PRの概要欄を更新
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
              body: `${originalBody}\n${title}\n${result}`,
            });
            throw new Error('確認されていない項目があります。');

  update-pr-status:
    runs-on: ubuntu-latest
    needs: check-commiter
    if: fromJSON(needs.check-commiter.outputs.should_continue) && (github.event.action == 'edited' || github.event.action == 'synchronize')
    steps:
    - name: Update pull request status based on checkboxes
      id: update_check
      uses: actions/github-script@v7
      with:
        script: |
          const prBody = context.payload.pull_request.body || ''
          
          const isAllChecked = !prBody.includes('- [ ]')

          if (isAllChecked) {
            return
          } else {
            throw new Error('確認されていない項目があります。')
          }