name: Pull request checklist checker

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  check-commiter:
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.check_is_fms.outputs.result }}
    steps:
    - name: Check all commiter are FMs member
      id: check_is_fms
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          const path = require('path');

          // リポジトリのルートディレクトリに移動
          const repoRoot = process.env.GITHUB_WORKSPACE;
          console.log(`Repository root directory: ${repoRoot}`);
          
          // PRに関連したコミットを取得
          const commitLists = await github.rest.pulls.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
          });

          // 開発ブランチとして扱うもの
          const developBranches = ['origin/develop', 'origin/stage', 'origin/feature/*', 'origin/bugfix/*']

          const allowedDomain = "@fullmarks.co.jp"

          // マージコミット以外のコミットをフィルタリング
          const developCommits = commitLists.data.filter(commit => {
              const commitSha = commit.sha;

              try {
                  // コミットが含まれるリモートブランチを取得
                  const branches = execSync(`git branch -r --contains ${commitSha}`).toString().split("\n").map(b => b.trim()).filter(b => b);

                  consoel.log("####")
                  consoel.log("branches", branches)

                  // 開発ブランチ以外に存在するならマージコミットとみなす
                  const isMergeCommit = branches.some(branch => !developBranches.some(dev => branch.match(new RegExp(dev.replace('*', '.*')))));

                  console.log(commit.commit.message, "is merge commit ? :", isMergeCommit)
                  return !isMergeCommit; // マージコミットでないものを残す
              } catch (error) {
                  console.log(`Error checking commit ${commitSha}:`, error);
                  return false;
              }
          })
            
          const isExistFMsEmployee = developCommits.some(commit => {
              const email = commit.commit.author.email;
              return email.endsWith(allowedDomain);
          });

          return isExistFMsEmployee
    
  pr-status-check:
    needs: check-commiter
    if: fromJSON(needs.check-commiter.outputs.should_continue) && (github.event.action == 'opened' || github.event.action == 'synchronize')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get checklist config
        id: get_checklist_config
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -o=json '.setting' .github/pull_request_check_config.yaml
      - name: Get PR information
        id: pr_information
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const pullRequest = context.payload.pull_request;

            // PRの差分を取得
            const response = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            })
            const files = response.data.map((item) => item.filename).join(",")

            fs.appendFileSync(process.env.GITHUB_OUTPUT, `CHANGED_FILES=${files}\n`);
            
            // PRの概要欄を取得
            const body = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
            });

            return body.data.body
      - name: Update PR body
        uses: actions/github-script@v7
        with:
          script: |
            let originalBody = ${{ steps.pr_information.outputs.result }} ?? ""

            const configs = ${{ steps.get_checklist_config.outputs.result }};
            
            let changedFiles = '${{ steps.pr_information.outputs.CHANGED_FILES }}'.split(',')
            
            let result = "";

            configs.forEach((config) => {
              let hasTargetFileDiffs = false

              if(config.path.endsWith('/')){
                hasTargetFileDiffs = changedFiles.some((path) =>{
                  return path.includes(config.path)  // パスが含まれているか
                }) 
              } else {
                hasTargetFileDiffs = changedFiles.some((path) =>{
                  return path === config.path  // パスが一致しているか
                })
              }

              hasTargetFileDiffs = hasTargetFileDiffs && config.checklists.every((checkItem) => {
                // PR概要欄にすでに記載がある場合はfalse
                // 文字列先頭の空白と記号を削除し、チェック文言のみにする
                const checkItemText = checkItem.match(/\s*\[.*?\]\s*(.*)/)?.[1]

                const checklistPattern = new RegExp(String.raw`- \[.?\] ${checkItemText}`)
                return !checklistPattern.test(originalBody)
              })
              
              if(hasTargetFileDiffs){
                result += config.checklists.join("\n") + "\n"
              }
            }) 

            if(!result){
              return
            }

            const title = "## レビュワーは以下の項目を確認してください";

            const pullRequest = context.payload.pull_request;
            // PRの概要欄を更新
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullRequest.number,
              body: `${originalBody}\n${title}\n${result}`,
            });
            throw new Error('確認されていない項目があります。');

  update-pr-status:
    runs-on: ubuntu-latest
    needs: check-commiter
    if: fromJSON(needs.check-commiter.outputs.should_continue) && (github.event.action == 'edited' || github.event.action == 'synchronize')
    steps:
    - name: Update pull request status based on checkboxes
      id: update_check
      uses: actions/github-script@v7
      with:
        script: |
          const prBody = context.payload.pull_request.body || ''
          
          const isAllChecked = !prBody.includes('- [ ]')

          if (isAllChecked) {
            return
          } else {
            throw new Error('確認されていない項目があります。')
          }